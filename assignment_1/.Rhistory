history()
ufo <- read.delim("/Users/david/machine_learning_for_hackers/01-Introduction/data/ufo/ufo_awesome.tsv", sep="\t", stringsAsFactors=FALSE, header=FALSE, na.strings="")
head(ufo)
v = c("DateOccurred", "DateReported", "Location", "ShortDescription", "Duration", "LongDescription")
v
names(ufo) <- v
head (ufo)
head(ufo[which(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8),1])
good.rows <- ifelse(nchar(ufo$DateOccurred)>!=8 | nchar(ufo$DateReported)!=8, FALSE, TRUE)
get.location <-function( l) { split.location <-tryCatch( strsplit( l,",")[[ 1]], error = function( e) return( c( NA, NA))) clean.location <-gsub(" ^ ","", split.location) if (length( clean.location) > 2) { return( c( NA, NA)) } else { return( clean.location) } }
good.rows <- ifelse(nchar(ufo$DateOccurred)!=8 | nchar(ufo$DateReported)!=8, FALSE,TRUE)
length(which(!good.rows))
ufo<-ufo[good.rows,]
length(ufo)
ufo
length(ufo)
ufo$DateOccurred<-as.Date(ufo$DateOccurred, format="%Y%m%d")
ufo$DateReported<-as.Date(ufo$DateReported, format="%Y%m%d")
get.location<-function(l) {split.location<-tryCatch(strsplit(l,",")[[1]], error=function(e) return(c(NA,NA)))clean.location<-gsub("^", "",split.location) if (length(clean.location)>2) {return(c(NA,NA))} else {return(clean.location)}}
get.location<-function(l){
split.location<-tryCatch(strsplit(l,",")[[1]], error = function(e)
return(c(NA,NA)))
clean.location<-gsub("^ ","",split.location)
if (length(clean.location)>2) {
return(c(NA,NA))
}
else {
return(clean.location)
}
}
city.state<-lapply(ufo$Location, get.location)
head(city.state)
location.matrix<-do.call(rbind,city.state)
ufo<-transform(ufo, USCity=location.matrix[,1], USState=tolower(location.matrix[,2]), stringsAsFactors=FALSE)
us.states<-c("ak","al","ar","az","ca","co","ct","de","fl","ga","hi","ia","id","il")
ufo$USState<-us.states[match(ufo$USState,us.states)]
ufo$USCity[is.na(ufo$USState)]<-NA
ufo.us<-subset(ufo, !is.na(USState))
head(ufo.us)
summary(ufo.us$DateOccurred)
quick.hist<-ggplot(ufo.us, aes(x=DateOccurred))+geom_histogram()+
scale_x_date(major="50 years")
library(ggplot)
library(ggplot2)
quick.hist<-ggplot(ufo.us, aes(x=DateOccurred))+geom_histogram()+
scale_x_date(major="50 years")
quick.hist<-ggplot(ufo.us, aes(x=DateOccurred))+geom_histogram()
ggsave(plot=quick.hist,filename="/tmp/plot.png", height=6, width=8)
quit
quit()
fix(good.rows)
x <- 1:20
x
x <- 1:40
x
x <- c(0.5,0.6)
x
x <- c(.5,.6)
x
x <- c("a", "b", "c")
x
y <- c(T, 3)
y
z <- 1:50
z
c <- as.character(z)
c
m <- matrix()
m
m <- matrix(nrow=20, ncol=20)
m
dim m
dim(m)
attributes(m)
m <- matrix(1:400, nrow=20, ncol=20)
m
m <- 1:30
dim(m)
m <- matrix(1:30)
m
m <- 1:30
m
dim(m) <- c(3,10)
m
x <- data.frame(foo = 1:4, bar = c(T,T,F,F))
View(x)
x
View(ufo.us)
View(m)
p <- list(a=1,b=5,c=22)
fix(p)
fix(p)
fix(p)
View(p)
m <-matrix(1:20, nrows=5,ncols-4)
m <-matrix(1:20, nrows=5,ncols=4)
m <-matrix(1:20, nrow=5,ncol=4)
m
View(m)
view(m)
x <- "a":"z"
x <- 1:10
x
x[x > 3]
x
$
_
m <- matrix(data = 1:20, nrow=5, ncol=4)
m
m[1]
m[4,2]
m[4,]
x <- list(foo=1:4)
x
fix(x)
View(x)
x <- list(foo=1:4, bar=0.6)
View(x)
x <- c(1,2,NA, 4, NA)
x
bad <- is.na(x)
bad
read.table("/tmp/somedata.txt")
f = read.table("/tmp/somedata.txt")
View(f)
f = read.table("/tmp/somedata.txt")
View(f)
x <- list(foo=1:4, bar=0.6)
dim(x)
head(x)
print(x)
print(1)
x = 3
x
if (x > 2) { print("hi")}
install.packages("ggplot2")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
ls()
a
b
install.packages("KernSmooth")
library(KernSmooth)
R.version.string
R.version.string
R.home
R.version
R.version.string
install.packages("swirl")
library(swirl)
install.packages("swirl")
R.version.string
sessionInfo()
library(RCurl)
install.packages("RCurl")
install.packages("libCurl")
install.packages("libcurl")
update.packages()
library(RCurl)
install.packages("RCurl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
getwd()
setwd("/Users/david/coursera_july_2014_r_working_directory/")
q()
getwd()
q()
complete()
getwd()
setwd("./r_programming_class/assignment_1/")
source("complete.R")
source("submitscript1.R")
submit()
6
submit()
submit()
submit()
submit()
submit()
submit()
submit()
out <- numeric()
class(out)
source("corr.R")
cr <- corr("specdata", 5000)
length(cr)
submit()
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/cacheSolve.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/cacheSolve.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/makeCacheMatrix.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/cacheSolve.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/cacheSolve.R')
makeCacheMatrix()
m <- makeCacheMatrix()
m
cacheSolve(m)
m$set(rbind(c(1,2), c(2,1)))
cacheSolve(m)
cacheSolve(m)
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/cacheSolve.R')
source('~/coursera_july_2014_r_working_directory/r_programming_class/ProgrammingAssignment2/makeCacheMatrix.R')
